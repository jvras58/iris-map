// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}
// em dev mudar para sqlite
datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  // TODO: Implemented email verification   
  emailVerified DateTime? @default(now())
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  EventSuggestion EventSuggestion[]
  locations       Location[]
}

model Profile {
  id                 String  @id @default(cuid())
  userId             String  @unique
  sexual_orientation String?
  city               String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EventSuggestion {
  id            String                @id @default(cuid())
  title         String
  categoryId    String
  description   String?
  date          DateTime
  time          String?
  location      String
  organizer     String
  price         Decimal?
  status        EventSuggestionStatus @default(PENDING)
  userId        String?
  lgbtqFriendly Boolean               @default(true)
  tags          String                @default("[]")
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt

  category EventCategory @relation(fields: [categoryId], references: [id])
  user     User?         @relation(fields: [userId], references: [id])

  @@map("event_suggestions")
}

enum EventSuggestionStatus {
  PENDING
  APPROVED
  REJECTED
}

model EventCategory {
  id    String @id @default(cuid())
  key   String @unique
  label String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  eventSuggestions EventSuggestion[]
  Location         Location[]

  @@map("event_categories")
}

model Location {
  id           String  @id @default(cuid())
  name         String
  categoryId   String
  userId       String?
  address      String
  description  String?
  safetyRating String  @default("neutral") // "safe", "neutral", "unsafe"
  lgbtqOwned   Boolean @default(false)
  phone        String?
  website      String?
  tags         String  @default("[]") // JSON array of tags

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  category  EventCategory @relation(fields: [categoryId], references: [id])
  User      User?         @relation(fields: [userId], references: [id])

  @@map("locations")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
